/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.DDZProto.AuthRequest');
goog.provide('proto.DDZProto.AuthResponse');
goog.provide('proto.DDZProto.DDZMessage');
goog.provide('proto.DDZProto.ErrorCode');
goog.provide('proto.DDZProto.Notify');
goog.provide('proto.DDZProto.Request');
goog.provide('proto.DDZProto.Response');
goog.provide('proto.DDZProto.UserLoginRequest');
goog.provide('proto.DDZProto.UserLoginResponse');
goog.provide('proto.DDZProto.authrequest');
goog.provide('proto.DDZProto.authresponse');
goog.provide('proto.DDZProto.userlogin');
goog.provide('proto.DDZProto.userloginresponse');

goog.require('jspb.Message');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.ExtensionFieldInfo');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DDZProto.DDZMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DDZProto.DDZMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DDZProto.DDZMessage.displayName = 'proto.DDZProto.DDZMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DDZProto.DDZMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.DDZProto.DDZMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DDZProto.DDZMessage} msg The msg instance to transform.
 * @return {!Object}
 */
proto.DDZProto.DDZMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.DDZProto.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.DDZProto.Response.toObject(includeInstance, f),
    notify: (f = msg.getNotify()) && proto.DDZProto.Notify.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DDZProto.DDZMessage}
 */
proto.DDZProto.DDZMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DDZProto.DDZMessage;
  return proto.DDZProto.DDZMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DDZProto.DDZMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DDZProto.DDZMessage}
 */
proto.DDZProto.DDZMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.DDZProto.Request;
      reader.readMessage(value,proto.DDZProto.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.DDZProto.Response;
      reader.readMessage(value,proto.DDZProto.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    case 3:
      var value = new proto.DDZProto.Notify;
      reader.readMessage(value,proto.DDZProto.Notify.deserializeBinaryFromReader);
      msg.setNotify(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.DDZProto.DDZMessage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.DDZProto.DDZMessage.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DDZProto.DDZMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.DDZProto.DDZMessage.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.DDZProto.Request.serializeBinaryToWriter
    );
  }
  f = this.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.DDZProto.Response.serializeBinaryToWriter
    );
  }
  f = this.getNotify();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.DDZProto.Notify.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.DDZProto.DDZMessage} The clone.
 */
proto.DDZProto.DDZMessage.prototype.cloneMessage = function() {
  return /** @type {!proto.DDZProto.DDZMessage} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Request request = 1;
 * @return {proto.DDZProto.Request}
 */
proto.DDZProto.DDZMessage.prototype.getRequest = function() {
  return /** @type{proto.DDZProto.Request} */ (
    jspb.Message.getWrapperField(this, proto.DDZProto.Request, 1));
};


/** @param {proto.DDZProto.Request|undefined} value  */
proto.DDZProto.DDZMessage.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.DDZProto.DDZMessage.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.DDZProto.DDZMessage.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {proto.DDZProto.Response}
 */
proto.DDZProto.DDZMessage.prototype.getResponse = function() {
  return /** @type{proto.DDZProto.Response} */ (
    jspb.Message.getWrapperField(this, proto.DDZProto.Response, 2));
};


/** @param {proto.DDZProto.Response|undefined} value  */
proto.DDZProto.DDZMessage.prototype.setResponse = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.DDZProto.DDZMessage.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.DDZProto.DDZMessage.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Notify notify = 3;
 * @return {proto.DDZProto.Notify}
 */
proto.DDZProto.DDZMessage.prototype.getNotify = function() {
  return /** @type{proto.DDZProto.Notify} */ (
    jspb.Message.getWrapperField(this, proto.DDZProto.Notify, 3));
};


/** @param {proto.DDZProto.Notify|undefined} value  */
proto.DDZProto.DDZMessage.prototype.setNotify = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.DDZProto.DDZMessage.prototype.clearNotify = function() {
  this.setNotify(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.DDZProto.DDZMessage.prototype.hasNotify = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DDZProto.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 2, null, null);
};
goog.inherits(proto.DDZProto.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DDZProto.Request.displayName = 'proto.DDZProto.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DDZProto.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.DDZProto.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DDZProto.Request} msg The msg instance to transform.
 * @return {!Object}
 */
proto.DDZProto.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    serial: jspb.Message.getField(msg, 1)
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.DDZProto.Request.extensions, proto.DDZProto.Request.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DDZProto.Request}
 */
proto.DDZProto.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DDZProto.Request;
  return proto.DDZProto.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DDZProto.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DDZProto.Request}
 */
proto.DDZProto.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSerial(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader, proto.DDZProto.Request.extensionsBinary,
        proto.DDZProto.Request.prototype.getExtension,
        proto.DDZProto.Request.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.DDZProto.Request} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.DDZProto.Request.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DDZProto.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.DDZProto.Request.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  jspb.Message.serializeBinaryExtensions(this, writer,
    proto.DDZProto.Request.extensionsBinary, proto.DDZProto.Request.prototype.getExtension);
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.DDZProto.Request} The clone.
 */
proto.DDZProto.Request.prototype.cloneMessage = function() {
  return /** @type {!proto.DDZProto.Request} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 serial = 1;
 * @return {number}
 */
proto.DDZProto.Request.prototype.getSerial = function() {
  return /** @type {number} */ (!this.hasSerial() ? 0 : jspb.Message.getField(this, 1));
};


/** @param {number?|undefined} value  */
proto.DDZProto.Request.prototype.setSerial = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.DDZProto.Request.prototype.clearSerial = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.DDZProto.Request.prototype.hasSerial = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object.<number, jspb.ExtensionFieldInfo>}
 */
proto.DDZProto.Request.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object.<number, jspb.ExtensionFieldInfo>}
 */
proto.DDZProto.Request.extensionsBinary = {};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DDZProto.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 5, null, null);
};
goog.inherits(proto.DDZProto.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DDZProto.Response.displayName = 'proto.DDZProto.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DDZProto.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.DDZProto.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DDZProto.Response} msg The msg instance to transform.
 * @return {!Object}
 */
proto.DDZProto.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    serial: jspb.Message.getField(msg, 1),
    errorcode: jspb.Message.getField(msg, 2),
    errormessage: jspb.Message.getField(msg, 3),
    coin: jspb.Message.getOptionalFloatingPointField(msg, 4)
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.DDZProto.Response.extensions, proto.DDZProto.Response.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DDZProto.Response}
 */
proto.DDZProto.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DDZProto.Response;
  return proto.DDZProto.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DDZProto.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DDZProto.Response}
 */
proto.DDZProto.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSerial(value);
      break;
    case 2:
      var value = /** @type {!proto.DDZProto.ErrorCode} */ (reader.readEnum());
      msg.setErrorcode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrormessage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCoin(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader, proto.DDZProto.Response.extensionsBinary,
        proto.DDZProto.Response.prototype.getExtension,
        proto.DDZProto.Response.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.DDZProto.Response} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.DDZProto.Response.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DDZProto.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.DDZProto.Response.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = jspb.Message.getField(this, 3);
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = jspb.Message.getField(this, 4);
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  jspb.Message.serializeBinaryExtensions(this, writer,
    proto.DDZProto.Response.extensionsBinary, proto.DDZProto.Response.prototype.getExtension);
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.DDZProto.Response} The clone.
 */
proto.DDZProto.Response.prototype.cloneMessage = function() {
  return /** @type {!proto.DDZProto.Response} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 serial = 1;
 * @return {number}
 */
proto.DDZProto.Response.prototype.getSerial = function() {
  return /** @type {number} */ (!this.hasSerial() ? 0 : jspb.Message.getField(this, 1));
};


/** @param {number?|undefined} value  */
proto.DDZProto.Response.prototype.setSerial = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.DDZProto.Response.prototype.clearSerial = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.DDZProto.Response.prototype.hasSerial = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required ErrorCode errorCode = 2;
 * @return {!proto.DDZProto.ErrorCode}
 */
proto.DDZProto.Response.prototype.getErrorcode = function() {
  return /** @type {!proto.DDZProto.ErrorCode} */ (!this.hasErrorcode() ? 0 : jspb.Message.getField(this, 2));
};


/** @param {proto.DDZProto.ErrorCode|undefined} value  */
proto.DDZProto.Response.prototype.setErrorcode = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.DDZProto.Response.prototype.clearErrorcode = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.DDZProto.Response.prototype.hasErrorcode = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string errorMessage = 3;
 * @return {string}
 */
proto.DDZProto.Response.prototype.getErrormessage = function() {
  return /** @type {string} */ (!this.hasErrormessage() ? "" : jspb.Message.getField(this, 3));
};


/** @param {string?|undefined} value  */
proto.DDZProto.Response.prototype.setErrormessage = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.DDZProto.Response.prototype.clearErrormessage = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.DDZProto.Response.prototype.hasErrormessage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double coin = 4;
 * @return {number}
 */
proto.DDZProto.Response.prototype.getCoin = function() {
  return /** @type {number} */ (!this.hasCoin() ? 0.0 : +jspb.Message.getField(this, 4));
};


/** @param {number?|undefined} value  */
proto.DDZProto.Response.prototype.setCoin = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.DDZProto.Response.prototype.clearCoin = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.DDZProto.Response.prototype.hasCoin = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object.<number, jspb.ExtensionFieldInfo>}
 */
proto.DDZProto.Response.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object.<number, jspb.ExtensionFieldInfo>}
 */
proto.DDZProto.Response.extensionsBinary = {};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DDZProto.Notify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 1, null, null);
};
goog.inherits(proto.DDZProto.Notify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DDZProto.Notify.displayName = 'proto.DDZProto.Notify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DDZProto.Notify.prototype.toObject = function(opt_includeInstance) {
  return proto.DDZProto.Notify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DDZProto.Notify} msg The msg instance to transform.
 * @return {!Object}
 */
proto.DDZProto.Notify.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.DDZProto.Notify.extensions, proto.DDZProto.Notify.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DDZProto.Notify}
 */
proto.DDZProto.Notify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DDZProto.Notify;
  return proto.DDZProto.Notify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DDZProto.Notify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DDZProto.Notify}
 */
proto.DDZProto.Notify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      jspb.Message.readBinaryExtension(msg, reader, proto.DDZProto.Notify.extensionsBinary,
        proto.DDZProto.Notify.prototype.getExtension,
        proto.DDZProto.Notify.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.DDZProto.Notify} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.DDZProto.Notify.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DDZProto.Notify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.DDZProto.Notify.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  jspb.Message.serializeBinaryExtensions(this, writer,
    proto.DDZProto.Notify.extensionsBinary, proto.DDZProto.Notify.prototype.getExtension);
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.DDZProto.Notify} The clone.
 */
proto.DDZProto.Notify.prototype.cloneMessage = function() {
  return /** @type {!proto.DDZProto.Notify} */ (jspb.Message.cloneMessage(this));
};



/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object.<number, jspb.ExtensionFieldInfo>}
 */
proto.DDZProto.Notify.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object.<number, jspb.ExtensionFieldInfo>}
 */
proto.DDZProto.Notify.extensionsBinary = {};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DDZProto.AuthRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 1, null, null);
};
goog.inherits(proto.DDZProto.AuthRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DDZProto.AuthRequest.displayName = 'proto.DDZProto.AuthRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DDZProto.AuthRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.DDZProto.AuthRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DDZProto.AuthRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.DDZProto.AuthRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.DDZProto.AuthRequest.extensions, proto.DDZProto.AuthRequest.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DDZProto.AuthRequest}
 */
proto.DDZProto.AuthRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DDZProto.AuthRequest;
  return proto.DDZProto.AuthRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DDZProto.AuthRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DDZProto.AuthRequest}
 */
proto.DDZProto.AuthRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      jspb.Message.readBinaryExtension(msg, reader, proto.DDZProto.AuthRequest.extensionsBinary,
        proto.DDZProto.AuthRequest.prototype.getExtension,
        proto.DDZProto.AuthRequest.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.DDZProto.AuthRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.DDZProto.AuthRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DDZProto.AuthRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.DDZProto.AuthRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  jspb.Message.serializeBinaryExtensions(this, writer,
    proto.DDZProto.AuthRequest.extensionsBinary, proto.DDZProto.AuthRequest.prototype.getExtension);
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.DDZProto.AuthRequest} The clone.
 */
proto.DDZProto.AuthRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.DDZProto.AuthRequest} */ (jspb.Message.cloneMessage(this));
};



/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object.<number, jspb.ExtensionFieldInfo>}
 */
proto.DDZProto.AuthRequest.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object.<number, jspb.ExtensionFieldInfo>}
 */
proto.DDZProto.AuthRequest.extensionsBinary = {};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DDZProto.AuthResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 1, null, null);
};
goog.inherits(proto.DDZProto.AuthResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DDZProto.AuthResponse.displayName = 'proto.DDZProto.AuthResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DDZProto.AuthResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.DDZProto.AuthResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DDZProto.AuthResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.DDZProto.AuthResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.DDZProto.AuthResponse.extensions, proto.DDZProto.AuthResponse.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DDZProto.AuthResponse}
 */
proto.DDZProto.AuthResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DDZProto.AuthResponse;
  return proto.DDZProto.AuthResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DDZProto.AuthResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DDZProto.AuthResponse}
 */
proto.DDZProto.AuthResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      jspb.Message.readBinaryExtension(msg, reader, proto.DDZProto.AuthResponse.extensionsBinary,
        proto.DDZProto.AuthResponse.prototype.getExtension,
        proto.DDZProto.AuthResponse.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.DDZProto.AuthResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.DDZProto.AuthResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DDZProto.AuthResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.DDZProto.AuthResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  jspb.Message.serializeBinaryExtensions(this, writer,
    proto.DDZProto.AuthResponse.extensionsBinary, proto.DDZProto.AuthResponse.prototype.getExtension);
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.DDZProto.AuthResponse} The clone.
 */
proto.DDZProto.AuthResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.DDZProto.AuthResponse} */ (jspb.Message.cloneMessage(this));
};



/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object.<number, jspb.ExtensionFieldInfo>}
 */
proto.DDZProto.AuthResponse.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object.<number, jspb.ExtensionFieldInfo>}
 */
proto.DDZProto.AuthResponse.extensionsBinary = {};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DDZProto.UserLoginRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DDZProto.UserLoginRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DDZProto.UserLoginRequest.displayName = 'proto.DDZProto.UserLoginRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DDZProto.UserLoginRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.DDZProto.UserLoginRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DDZProto.UserLoginRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.DDZProto.UserLoginRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountname: jspb.Message.getField(msg, 1),
    password: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DDZProto.UserLoginRequest}
 */
proto.DDZProto.UserLoginRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DDZProto.UserLoginRequest;
  return proto.DDZProto.UserLoginRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DDZProto.UserLoginRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DDZProto.UserLoginRequest}
 */
proto.DDZProto.UserLoginRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.DDZProto.UserLoginRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.DDZProto.UserLoginRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DDZProto.UserLoginRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.DDZProto.UserLoginRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.DDZProto.UserLoginRequest} The clone.
 */
proto.DDZProto.UserLoginRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.DDZProto.UserLoginRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string accountName = 1;
 * @return {string}
 */
proto.DDZProto.UserLoginRequest.prototype.getAccountname = function() {
  return /** @type {string} */ (!this.hasAccountname() ? "" : jspb.Message.getField(this, 1));
};


/** @param {string?|undefined} value  */
proto.DDZProto.UserLoginRequest.prototype.setAccountname = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.DDZProto.UserLoginRequest.prototype.clearAccountname = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.DDZProto.UserLoginRequest.prototype.hasAccountname = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.DDZProto.UserLoginRequest.prototype.getPassword = function() {
  return /** @type {string} */ (!this.hasPassword() ? "" : jspb.Message.getField(this, 2));
};


/** @param {string?|undefined} value  */
proto.DDZProto.UserLoginRequest.prototype.setPassword = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.DDZProto.UserLoginRequest.prototype.clearPassword = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.DDZProto.UserLoginRequest.prototype.hasPassword = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DDZProto.UserLoginResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DDZProto.UserLoginResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DDZProto.UserLoginResponse.displayName = 'proto.DDZProto.UserLoginResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DDZProto.UserLoginResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.DDZProto.UserLoginResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DDZProto.UserLoginResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.DDZProto.UserLoginResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DDZProto.UserLoginResponse}
 */
proto.DDZProto.UserLoginResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DDZProto.UserLoginResponse;
  return proto.DDZProto.UserLoginResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DDZProto.UserLoginResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DDZProto.UserLoginResponse}
 */
proto.DDZProto.UserLoginResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.DDZProto.UserLoginResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.DDZProto.UserLoginResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DDZProto.UserLoginResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.DDZProto.UserLoginResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.DDZProto.UserLoginResponse} The clone.
 */
proto.DDZProto.UserLoginResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.DDZProto.UserLoginResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.DDZProto.UserLoginResponse.prototype.getToken = function() {
  return /** @type {string} */ (!this.hasToken() ? "" : jspb.Message.getField(this, 2));
};


/** @param {string?|undefined} value  */
proto.DDZProto.UserLoginResponse.prototype.setToken = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.DDZProto.UserLoginResponse.prototype.clearToken = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.DDZProto.UserLoginResponse.prototype.hasToken = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.DDZProto.ErrorCode = {
  E_SUCCESS: 0,
  E_UNKNOWN: 1,
  E_WRONGURL: 2,
  E_NOTSUPPORTXHR: 3,
  E_ACCOUNTNOTEXIST: 65537,
  E_MONEYNOTENOUGH: 131073,
  E_TOKENINVALID: 196609,
  E_OTHERS: 262145
};


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `authrequest`.
 * @type {!jspb.ExtensionFieldInfo.<!proto.DDZProto.AuthRequest>}
 */
proto.DDZProto.authrequest = new jspb.ExtensionFieldInfo(
    11,
    {authrequest: 0},
    proto.DDZProto.AuthRequest,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.DDZProto.AuthRequest.toObject),
    0);

proto.DDZProto.Request.extensionsBinary[11] = new jspb.ExtensionFieldBinaryInfo(
    proto.DDZProto.authrequest,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.DDZProto.AuthRequest.serializeBinaryToWriter,
    proto.DDZProto.AuthRequest.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.DDZProto.Request.extensions[11] = proto.DDZProto.authrequest;


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `authresponse`.
 * @type {!jspb.ExtensionFieldInfo.<!proto.DDZProto.AuthResponse>}
 */
proto.DDZProto.authresponse = new jspb.ExtensionFieldInfo(
    11,
    {authresponse: 0},
    proto.DDZProto.AuthResponse,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.DDZProto.AuthResponse.toObject),
    0);

proto.DDZProto.Response.extensionsBinary[11] = new jspb.ExtensionFieldBinaryInfo(
    proto.DDZProto.authresponse,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.DDZProto.AuthResponse.serializeBinaryToWriter,
    proto.DDZProto.AuthResponse.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.DDZProto.Response.extensions[11] = proto.DDZProto.authresponse;


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `userlogin`.
 * @type {!jspb.ExtensionFieldInfo.<!proto.DDZProto.UserLoginRequest>}
 */
proto.DDZProto.userlogin = new jspb.ExtensionFieldInfo(
    13,
    {userlogin: 0},
    proto.DDZProto.UserLoginRequest,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.DDZProto.UserLoginRequest.toObject),
    0);

proto.DDZProto.AuthRequest.extensionsBinary[13] = new jspb.ExtensionFieldBinaryInfo(
    proto.DDZProto.userlogin,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.DDZProto.UserLoginRequest.serializeBinaryToWriter,
    proto.DDZProto.UserLoginRequest.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.DDZProto.AuthRequest.extensions[13] = proto.DDZProto.userlogin;


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `userloginresponse`.
 * @type {!jspb.ExtensionFieldInfo.<!proto.DDZProto.UserLoginResponse>}
 */
proto.DDZProto.userloginresponse = new jspb.ExtensionFieldInfo(
    13,
    {userloginresponse: 0},
    proto.DDZProto.UserLoginResponse,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.DDZProto.UserLoginResponse.toObject),
    0);

proto.DDZProto.AuthResponse.extensionsBinary[13] = new jspb.ExtensionFieldBinaryInfo(
    proto.DDZProto.userloginresponse,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.DDZProto.UserLoginResponse.serializeBinaryToWriter,
    proto.DDZProto.UserLoginResponse.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.DDZProto.AuthResponse.extensions[13] = proto.DDZProto.userloginresponse;

